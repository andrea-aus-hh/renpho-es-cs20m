name: Build, test and publish the Weight Scanner

on:
  push:
    branches: ['master']
    paths:
      - 'weightscanner/**'
      - '.github/workflows/docker.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/weightscanner

jobs:
  Compile_and_Test_Go_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
      - name: Run gofmt
        working-directory: weightscanner
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted:"
            echo "$unformatted"
            echo "Please run 'gofmt -w .' to format your code."
            exit 1
          else
            echo "All files are properly formatted."
          fi
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
              ~/.cache/go-build
              ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Compile Go Project
        working-directory: weightscanner
        run: |
          go build -v ./...

      - name: Run Tests
        working-directory: weightscanner
        run: |
          go test -v ./...
          if [ $? -ne 0 ]; then
            echo "Tests failed."
            exit 1
          else
            echo "All tests passed successfully."
          fi
      - name: Build for Raspberry Pi
        working-directory: weightscanner
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=arm GOARM=7 go build -o dist/weightscanner
      - name: Package Tarball
        working-directory: weightscanner
        run: |
          tar -czvf weightscanner.tar.gz -C dist weightscanner
      - name: Tag the repository
        id: tag
        run: |
          TAG=v$(date -Iseconds | sed 's/[T:\+]/-/g')
          echo "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
          git push origin $TAG
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: weightscanner/weightscanner.tar.gz
          make_latest: true
          tag_name: ${{ steps.tag.outputs.tag }}
